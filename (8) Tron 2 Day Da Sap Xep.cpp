/*
Cho 2 mảng đã được sắp xếp tăng dần, thực hiện trộn 2 dãy trên thành một dãy được sắp xếp.

Input Format

Dòng đầu tiên là số lượng phần tử của 2 dãy n và m Dòng thứ 2 là n phần tử trong dãy số 1. Dòng thứ 3 là m phần tử trong dãy thứ 2.

Constraints

1≤n,m≤10^7; 1≤ai≤10^9

Output Format

In ra mảng sau khi trộn

Sample Input 0

42 469
35 145 153 169 281 292 299 322 333 334 358 382 391 421 436 447 464 478 491 500 538 604 667 703 705 716 718 724 726 771 811 827 827 869 894 895 902 912 942 961 962 995 
2 3 3 6 7 8 9 10 11 18 18 19 20 21 21 21 22 23 24 30 30 31 31 35 37 38 40 41 43 44 52 53 53 55 60 60 61 64 70 72 75 82 84 86 87 88 93 97 99 101 102 105 106 107 109 114 115 116 118 119 123 125 127 129 139 140 141 142 142 144 145 150 152 153 154 154 156 157 159 161 161 164 168 168 169 170 170 173 177 179 181 182 185 186 187 189 190 190 191 191 192 193 195 195 195 196 199 200 202 202 202 209 213 221 222 222 224 227 235 249 253 253 255 260 261 263 264 264 270 270 270 272 279 281 281 282 285 285 286 286 287 288 290 291 292 292 297 297 302 303 306 308 309 310 313 313 313 314 314 315 316 316 321 322 323 326 328 329 334 337 343 348 350 350 350 355 355 359 360 362 368 370 371 372 374 376 383 386 389 391 393 401 410 411 413 413 414 416 416 418 421 422 423 423 423 425 426 430 432 433 434 437 439 439 441 446 448 450 451 455 457 458 464 466 466 467 472 474 474 476 477 480 481 483 483 484 484 485 487 487 488 492 503 505 506 510 510 511 512 512 514 518 519 520 520 523 525 527 529 529 535 537 537 538 538 541 543 547 547 548 548 549 549 550 555 556 557 558 565 573 574 576 576 577 580 585 587 588 589 591 593 593 595 596 596 600 600 602 609 616 617 617 618 622 623 624 624 625 625 625 626 627 627 629 629 634 636 639 644 646 646 648 648 649 651 655 655 657 658 658 659 662 664 667 668 668 671 673 673 678 687 688 692 694 694 695 699 701 702 704 711 711 712 718 721 723 724 725 728 729 734 734 737 741 745 745 753 753 756 756 757 757 757 758 758 760 762 763 767 771 773 777 778 786 787 788 789 790 796 798 798 798 800 802 805 807 808 813 815 824 829 832 832 833 833 833 836 840 842 844 844 851 859 861 866 868 869 869 874 875 881 882 886 888 890 892 893 896 900 900 900 902 905 909 912 924 924 926 928 929 930 931 932 935 938 941 942 944 945 945 946 949 954 958 958 962 966 966 972 974 976 977 982 985 986 989 996 998 999 
Sample Output 0

2 3 3 6 7 8 9 10 11 18 18 19 20 21 21 21 22 23 24 30 30 31 31 35 35 37 38 40 41 43 44 52 53 53 55 60 60 61 64 70 72 75 82 84 86 87 88 93 97 99 101 102 105 106 107 109 114 115 116 118 119 123 125 127 129 139 140 141 142 142 144 145 145 150 152 153 153 154 154 156 157 159 161 161 164 168 168 169 169 170 170 173 177 179 181 182 185 186 187 189 190 190 191 191 192 193 195 195 195 196 199 200 202 202 202 209 213 221 222 222 224 227 235 249 253 253 255 260 261 263 264 264 270 270 270 272 279 281 281 281 282 285 285 286 286 287 288 290 291 292 292 292 297 297 299 302 303 306 308 309 310 313 313 313 314 314 315 316 316 321 322 322 323 326 328 329 333 334 334 337 343 348 350 350 350 355 355 358 359 360 362 368 370 371 372 374 376 382 383 386 389 391 391 393 401 410 411 413 413 414 416 416 418 421 421 422 423 423 423 425 426 430 432 433 434 436 437 439 439 441 446 447 448 450 451 455 457 458 464 464 466 466 467 472 474 474 476 477 478 480 481 483 483 484 484 485 487 487 488 491 492 500 503 505 506 510 510 511 512 512 514 518 519 520 520 523 525 527 529 529 535 537 537 538 538 538 541 543 547 547 548 548 549 549 550 555 556 557 558 565 573 574 576 576 577 580 585 587 588 589 591 593 593 595 596 596 600 600 602 604 609 616 617 617 618 622 623 624 624 625 625 625 626 627 627 629 629 634 636 639 644 646 646 648 648 649 651 655 655 657 658 658 659 662 664 667 667 668 668 671 673 673 678 687 688 692 694 694 695 699 701 702 703 704 705 711 711 712 716 718 718 721 723 724 724 725 726 728 729 734 734 737 741 745 745 753 753 756 756 757 757 757 758 758 760 762 763 767 771 771 773 777 778 786 787 788 789 790 796 798 798 798 800 802 805 807 808 811 813 815 824 827 827 829 832 832 833 833 833 836 840 842 844 844 851 859 861 866 868 869 869 869 874 875 881 882 886 888 890 892 893 894 895 896 900 900 900 902 902 905 909 912 912 924 924 926 928 929 930 931 932 935 938 941 942 942 944 945 945 946 949 954 958 958 961 962 962 966 966 972 974 976 977 982 985 986 989 995 996 998 999
*/

#include "bits/stdc++.h"

#define FAST_IO ios::sync_with_stdio(0); cin.tie(0)

using namespace std;

//=======================================
int main ()
{
    FAST_IO;
    int n,m,x;
    vector <int> v1,v2;
    cin >> n >> m;
    for (int i = 0; i < n; i ++){
        cin >> x;
        v1.push_back(x);
    }
    for (int i = 0; i < m; i ++){
        cin >> x;
        v2.push_back(x);
    }
    v1.insert(v1.end(),v2.begin(),v2.end());
    sort(v1.begin(), v1.end());
    for (auto it : v1) cout << it << ' ';
    return 0;
}